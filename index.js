const { Telegraf, Markup } = require("telegraf");
const express = require("express");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
bot.telegram.setWebhook(process.env.WEBHOOK_URL);
app.use(express.json());
app.post("/webhook", (req, res) => {
  bot.handleUpdate(req.body, res);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArtAst! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üë• –õ—é–¥–∏", url: process.env.APP_URL }],
        [{ text: "üèõ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", url: process.env.APP_URL }],
        [{ text: "üìÖ –°–æ–±—ã—Ç–∏—è", url: process.env.APP_URL }],
        [{ text: "‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data: "apply" }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
bot.action("apply", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üßë‚Äçüé® –õ–∏—á–Ω—É—é –∞–Ω–∫–µ—Ç—É", callback_data: "apply_person" }],
        [{ text: "üèõ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", callback_data: "apply_space" }],
        [{ text: "üé≠ –°–æ–±—ã—Ç–∏–µ", callback_data: "apply_event" }]
      ]
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, () => {
  console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000");
});
