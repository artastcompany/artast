const { Telegraf, Scenes, session, Markup } = require("telegraf");
const express = require("express");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// Webhook
app.use(express.json());
app.post("/webhook", async (req, res) => {
  try {
    console.log("Webhook –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:", req.body);
    await bot.handleUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.sendStatus(500);
  }
});

// üé≠ –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏
const applicationScene = new Scenes.WizardScene(
  "application",
  async (ctx) => {
    await ctx.reply("üìå –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    ctx.wizard.state.name = ctx.message.text;
    await ctx.reply("üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    ctx.wizard.state.city = ctx.message.text;
    await ctx.reply("‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤):");
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message.text.length > 400) {
      await ctx.reply("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤).");
      return;
    }
    ctx.wizard.state.bio = ctx.message.text;
    await ctx.reply("üìû –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —Ç–µ–ª–µ—Ñ–æ–Ω):");
    return ctx.wizard.next();
  },
  async (ctx) => {
    ctx.wizard.state.contact = ctx.message.text;
    await ctx.reply(
      "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–±–µ
    const adminMessage = `
üöÄ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*
üë§ –ò–º—è: ${ctx.wizard.state.name}
üìç –ì–æ—Ä–æ–¥: ${ctx.wizard.state.city}
üìù –û —Å–µ–±–µ: ${ctx.wizard.state.bio}
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${ctx.wizard.state.contact}
    `;
    
    await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage, { parse_mode: "Markdown" });

    return ctx.scene.leave();
  }
);

// –°–æ–∑–¥–∞—ë–º —Å—Ü–µ–Ω—É
const stage = new Scenes.Stage([applicationScene]);
bot.use(session());
bot.use(stage.middleware());

// ‚úÖ –ö–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
bot.start(async (ctx) => {
  await ctx.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
    Markup.inlineKeyboard([
      [Markup.button.webApp("üë• –õ—é–¥–∏", process.env.WEB_APP_URL)],
      [Markup.button.webApp("üèõ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", process.env.WEB_APP_URL)],
      [Markup.button.webApp("üìÖ –°–æ–±—ã—Ç–∏—è", process.env.WEB_APP_URL)],
      [Markup.button.webApp("‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", process.env.WEB_APP_URL)],
      [Markup.button.callback("‚úèÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ", "apply_bot")]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ"
bot.action("apply_bot", (ctx) => ctx.scene.enter("application"));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"));

module.exports = app;
