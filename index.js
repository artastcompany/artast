async function sendApplication(ctx, type) {
  let application = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª *${type}*!\n`;
  for (let key in ctx.wizard.state) {
    application += `üìå ${key}: ${ctx.wizard.state[key]}\n`;
  }
  
  await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, application, { parse_mode: "Markdown" });
  await ctx.reply("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!");
  return ctx.scene.leave();
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—ã –≤ –±–æ—Ç–∞
const { Telegraf } = require("telegraf");
const express = require("express");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// Webhook
app.use(express.json());
app.post("/webhook", async (req, res) => {
  try {
    console.log("Webhook –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:", req.body);
    await bot.handleUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.sendStatus(500);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.start((ctx) => {
  console.log("–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /start");
  ctx.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîπ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", callback_data: "test" }]
      ],
    },
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
bot.action("test", (ctx) => {
  ctx.reply("üéâ –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"));

module.exports = app;
