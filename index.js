const { Telegraf, Scenes, session, Markup } = require("telegraf"); const express = require("express");

const bot = new Telegraf(process.env.BOT_TOKEN); const app = express();

// Webhook app.use(express.json()); app.post("/webhook", async (req, res) => { try { console.log("Webhook –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:", req.body); await bot.handleUpdate(req.body); res.sendStatus(200); } catch (error) { console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error); res.sendStatus(500); } });

// üé≠ –°—Ü–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ const peopleScene = new Scenes.WizardScene( "people", async (ctx) => { await ctx.reply("üìå –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"); return ctx.wizard.next(); }, async (ctx) => { ctx.wizard.state.name = ctx.message.text; await ctx.reply("üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"); return ctx.wizard.next(); }, async (ctx) => { ctx.wizard.state.city = ctx.message.text; await ctx.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤):"); return ctx.wizard.next(); }, async (ctx) => { ctx.wizard.state.bio = ctx.message.text.substring(0, 400); await ctx.reply("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —Ç–µ–ª–µ—Ñ–æ–Ω):"); return ctx.wizard.next(); }, async (ctx) => { ctx.wizard.state.contact = ctx.message.text; await sendApplication(ctx, "–õ—é–¥–∏"); } );

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç async function sendApplication(ctx, type) { const adminChatId = process.env.ADMIN_CHAT_ID; let application = üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª *${type}*\n; application += üë§ –ò–º—è: ${ctx.wizard.state.name}\n; application += üìç –ì–æ—Ä–æ–¥: ${ctx.wizard.state.city}\n; application += üìù –û —Å–µ–±–µ: ${ctx.wizard.state.bio}\n; application += üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${ctx.wizard.state.contact};

if (adminChatId) { await bot.telegram.sendMessage(adminChatId, application, { parse_mode: "Markdown" }); }

await ctx.reply("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!"); return ctx.scene.leave(); }

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É –≤ –±–æ—Ç–∞ const stage = new Scenes.Stage([peopleScene]); bot.use(session()); bot.use(stage.middleware());

// –ö–Ω–æ–ø–∫–∏ bot.start((ctx) => { ctx.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: Markup.inlineKeyboard([ [Markup.button.webApp("üë• –õ—é–¥–∏", process.env.WEB_APP_URL)], [Markup.button.webApp("üèõ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", process.env.WEB_APP_URL)], [Markup.button.webApp("üìÖ –°–æ–±—ã—Ç–∏—è", process.env.WEB_APP_URL)], [Markup.button.callback("‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "apply_people")] ]), }); });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–∫–∏ bot.action("apply_people", (ctx) => ctx.scene.enter("people"));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ app.listen(3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"));

module.exports = app;
