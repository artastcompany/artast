const { Telegraf, Markup } = require("telegraf");
const express = require("express");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// –¢–≤–æ–π Telegram ID (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏)
const ADMIN_ID = "–¢–í–û–ô_TG_ID";

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
bot.telegram.setWebhook(process.env.WEBHOOK_URL);
app.use(express.json());
app.post("/webhook", (req, res) => {
  bot.handleUpdate(req.body, res);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArtAst! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", Markup.inlineKeyboard([
    [Markup.button.url("üë• –õ—é–¥–∏", process.env.APP_URL)],
    [Markup.button.url("üèõ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", process.env.APP_URL)],
    [Markup.button.url("üìÖ –°–æ–±—ã—Ç–∏—è", process.env.APP_URL)],
    [Markup.button.callback("‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "apply")]
  ]));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
bot.action("apply", async (ctx) => {
  await ctx.answerCbQuery(); // –£–±–∏—Ä–∞–µ—Ç "–∑–∞–≤–∏—Å–∞–Ω–∏–µ" –∫–Ω–æ–ø–∫–∏
  ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å?", Markup.inlineKeyboard([
    [Markup.button.callback("üßë‚Äçüé® –õ–∏—á–Ω—É—é –∞–Ω–∫–µ—Ç—É", "apply_person")],
    [Markup.button.callback("üèõ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "apply_space")],
    [Markup.button.callback("üé≠ –°–æ–±—ã—Ç–∏–µ", "apply_event")]
  ]));
});

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
const userApplications = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–∫–∏ (—à–∞–≥ 1)
const askForData = async (ctx, type) => {
  const chatId = ctx.chat.id;
  userApplications[chatId] = { type, step: 1, data: {} };
  ctx.reply("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
};

// –õ–∏—á–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
bot.action("apply_person", async (ctx) => {
  await ctx.answerCbQuery();
  askForData(ctx, "person");
});

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
bot.action("apply_space", async (ctx) => {
  await ctx.answerCbQuery();
  askForData(ctx, "space");
});

// –°–æ–±—ã—Ç–∏—è
bot.action("apply_event", async (ctx) => {
  await ctx.answerCbQuery();
  askForData(ctx, "event");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on("text", async (ctx) => {
  const chatId = ctx.chat.id;
  const application = userApplications[chatId];

  if (!application) return;

  switch (application.step) {
    case 1:
      application.data.name = ctx.message.text;
      application.step++;
      ctx.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?");
      break;
    case 2:
      application.data.city = ctx.message.text;
      application.step++;
      ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ —Å–µ–±–µ, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–∏)");
      break;
    case 3:
      application.data.description = ctx.message.text;
      application.step++;
      ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ–≥—Ä–∞–º, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —Ç–µ–ª–µ—Ñ–æ–Ω)");
      break;
    case 4:
      application.data.contacts = ctx.message.text;
      application.step++;
      ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.");
      application.data.photos = [];
      break;
    case 5:
      if (ctx.message.text.toLowerCase() === "–≥–æ—Ç–æ–≤–æ") {
        application.step++;
        sendApplicationToAdmin(ctx, application);
      } else if (ctx.message.photo) {
        application.data.photos.push(ctx.message.photo.pop().file_id);
        if (application.data.photos.length === 5) {
          application.step++;
          sendApplicationToAdmin(ctx, application);
        }
      } else {
        ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏.");
      }
      break;
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
const sendApplicationToAdmin = (ctx, application) => {
  let message = `üì© **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞**\n\n`;
  message += `**–¢–∏–ø**: ${application.type === "person" ? "–õ–∏—á–Ω–∞—è –∞–Ω–∫–µ—Ç–∞" : application.type === "space" ? "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ" : "–°–æ–±—ã—Ç–∏–µ"}\n`;
  message += `**–ò–º—è**: ${application.data.name}\n`;
  message += `**–ì–æ—Ä–æ–¥**: ${application.data.city}\n`;
  message += `**–û–ø–∏—Å–∞–Ω–∏–µ**: ${application.data.description}\n`;
  message += `**–ö–æ–Ω—Ç–∞–∫—Ç—ã**: ${application.data.contacts}\n`;

  bot.telegram.sendMessage(ADMIN_ID, message, { parse_mode: "Markdown" });

  if (application.data.photos.length > 0) {
    application.data.photos.forEach(photo => {
      bot.telegram.sendPhoto(ADMIN_ID, photo);
    });
  }

  ctx.reply("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!");
  delete userApplications[ctx.chat.id];
};

app.listen(3000, () => {
  console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000");
});
