const { Telegraf, Scenes, session, Markup } = require("telegraf");
const express = require("express");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Webhook
app.use(express.json());
app.post("/webhook", async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
    res.sendStatus(500);
  }
});

// *** –°—Ü–µ–Ω—ã –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫ ***

// 1Ô∏è‚É£ –°—Ü–µ–Ω–∞ –¥–ª—è –ª—é–¥–µ–π
const peopleScene = new Scenes.WizardScene(
  "people",
  async (ctx) => {
    await ctx.reply("üìå –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message?.text) return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
    ctx.wizard.state.name = ctx.message.text;
    await ctx.reply("üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message?.text) return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
    ctx.wizard.state.city = ctx.message.text;
    await ctx.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message?.text) return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
    ctx.wizard.state.bio = ctx.message.text;
    await ctx.reply("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —Ç–µ–ª–µ—Ñ–æ–Ω):");
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message?.text) return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
    ctx.wizard.state.contact = ctx.message.text;
    await ctx.reply("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message?.photo) return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.");
    ctx.wizard.state.photo = ctx.message.photo[0].file_id;
    await ctx.reply("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç (–¥–æ 5 —Ñ–æ—Ç–æ):");
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message?.photo) return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.");
    ctx.wizard.state.works = ctx.message.photo.map(p => p.file_id);
    await ctx.reply(
      "üíº –í—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É?",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚úÖ –î–∞", "collab_yes"), Markup.button.callback("üí∞ –¢–æ–ª—å–∫–æ –∫–æ–º–º–µ—Ä—Ü–∏—è", "collab_no")],
      ])
    );
  }
);

peopleScene.action("collab_yes", async (ctx) => {
  ctx.wizard.state.collab = "–î–∞";
  await ctx.answerCbQuery();
  await sendApplication(ctx, "–õ—é–¥–∏");
});

peopleScene.action("collab_no", async (ctx) => {
  ctx.wizard.state.collab = "–¢–æ–ª—å–∫–æ –∫–æ–º–º–µ—Ä—Ü–∏—è";
  await ctx.answerCbQuery();
  await sendApplication(ctx, "–õ—é–¥–∏");
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
async function sendApplication(ctx, type) {
  try {
    let application = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª *${type}*!\n`;
    for (let key in ctx.wizard.state) {
      if (key !== "photos" && key !== "works") {
        application += `üìå ${key}: ${ctx.wizard.state[key]}\n`;
      }
    }
    
    await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, application, { parse_mode: "Markdown" });
    
    if (ctx.wizard.state.photos) {
      for (let photo of ctx.wizard.state.photos) {
        await bot.telegram.sendPhoto(process.env.ADMIN_CHAT_ID, photo);
      }
    }
    if (ctx.wizard.state.works) {
      for (let work of ctx.wizard.state.works) {
        await bot.telegram.sendPhoto(process.env.ADMIN_CHAT_ID, work);
      }
    }
    
    await ctx.reply("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!");
    return ctx.scene.leave();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—ã –≤ –±–æ—Ç–∞
const stage = new Scenes.Stage([peopleScene]);
bot.use(session());
bot.use(stage.middleware());

// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
bot.action("apply", (ctx) => {
  ctx.reply("üìå –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", Markup.inlineKeyboard([
    [Markup.button.callback("üë§ –ß–µ–ª–æ–≤–µ–∫", "apply_people")],
  ]));
});

bot.action("apply_people", (ctx) => ctx.scene.enter("people"));

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 3000"));

module.exports = app;
